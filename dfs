'''
DFS 깊이 우선 탐색
비선형 구조인 그래프 구조는
그래프로 표현된 모든 자료의
빠짐없는 검색이 중요

시작 정점의 한 방향으로 갈 수 있는 경로가 있는 곳까지
깊이 탐색해 가다가 더 이상 갈 곳이 없게 되면,
가장 마지막에 만났떤 갈림길 간선이 있는 정점으로 되돌아와서
다른 방향의 정점으로 탐색을 계속 반복하여
결국 모든 정점을 방문하는 순회방법

가장 마지막에 만났던 갈림길의 정점으로 되돌아가서
다시 깊이 우선 탐색으로 반복해야 하므로
후입선출 구조의 스택 사용

1. 시작 정점 v를 결정하여 방문한다.
2. 정점 v에 인접한 정점 중에서
    1) 방문 안 한 정점 x가 있으면,
        정점 v를 스택에 push하고
        정점 w를 방문한다.
        그리고 w를 v로 하여 다시 2.를 반복
    2) 방문하지 않은 정점이 없으면,
        탐색 방향 변경 위해
        스택을 pop하여 받은 가장 마지막 방문 정점을 v로 하여
        다시 2.를 반복
3. 스택이 공백이 될 때까지 2.를 반복

---

import sys
sys.stdin = open('input.txt')
from pprint import pprint

def dfs(v):
    global visited
    stack = [v]                                     # dfs의 출발 정점이 담긴 상태로 스택 초기화
    while stack:                                    # 스택이 비어있을때까지 반복
        v = stack.pop()                                 # 시작 정점을 스택에서 꺼냄
        if not visited[v]:                              # 아직 방문하지 않은 정점이라면
            visited[v] = 1                                  # 방문 체크
            print(f'방문 정점: {v}, 방문 체크: {visited}')
            for j in range(1, V+1):                         # 시작 정점과 연결된 정점 찾기
                if G[v][j] == 1 and not visited[j]:             # v 정점과 연결된 정점이면서 아직 방문하지 않은 경우에만
                    stack.append(j)                                 # 스택에 정점 추가

V, E = map(int, input().split())
temp = list(map(int, input().split()))                  # 연결된 정점 정보 입력

# 7 8 // 7 => 정점, 8 => 간선
# 1 2 / 1 3 / 2 4 / 2 5 / 4 6 / 5 6 / 6 7 / 3 7

G = [[0]*(V+1) for _ in range(V+1)]                     # 2차원 행렬 초기화
# print(G)
visited = [0]*(V+1)                                     # 방문 정점 표시할 리스트 초기화

for i in range(E):                                      # 방향성이 없으므로
    G[temp[i * 2]][temp[i * 2 + 1]] = 1                 # 시작 정점 행에 연결된 정점 열을 1로 변경
    G[temp[i * 2 + 1]][temp[i * 2]] = 1                 # 시작 정점 열에 연결된 정점 행도 1로 변경
# pprint(G)

dfs(1)

---

visited[] , stack[] 초기화
DFS(v)
    v 방문;
    visited[v] <- True
    do {
        if (v의 인접 정점 중 방문 안한 x 찾기)
             push(v);
             while (c) {
                 w 방문;
                 vixited[w] <- True
                 push(w);
                 x <- w;
                 v의 인접 정점 중 방문 안 한 w 찾기
             }
             c <- pop(stack);
    } while(v)
end DFS()

---

import sys
sys.stdin = open("input.txt")


def dfs(n): # n은 시작 정점
    global visited
    stack = [n]
    while stack: # 스택이 비어버리면 종료
        n = stack.pop()
        if visited[n] == 0: # 방문하지 않은 정점이라면,
            visited[n] = 1 # 방문 처리를 하고,
            print(f"방문정점 : {n}, 방문 체크 : {visited}")
            for j in range(1, V + 1):
                if g[n][j] == 1 and visited[j] == 0: # 연결되어있고, 방문하지 않았다면
                    stack.append(j)


V, E =  map(int, input().split())
temp = list(map(int, input().split()))

# 7 8 // 7 => 정점, 8 => 간선
# 1 2 / 1 3 / 2 4 / 2 5 / 4 6 / 5 6 / 6 7 / 3 7

# 스택, visited, g는 연결되어 있는 두개의 정점을 행렬로 표현.

g = [[0] * (V + 1) for _ in range(V + 1)]

for i in range(0, E):
    g[temp[i * 2]][temp[(i * 2) + 1]] = 1 # 단방향
    g[temp[(i * 2) + 1]][temp[i * 2]] = 1 # 주어진 문제는 양방향이므로

visited = [0] * (V + 1)

dfs(1) # 1번 노드에서 출발하여 dfs를 시작함


# dfs를 하면서 필요한 것.
# 정점의 개수, 간선의 개수, visited, 연결을 리스트든 행렬이든 표현한 것, stack
'''